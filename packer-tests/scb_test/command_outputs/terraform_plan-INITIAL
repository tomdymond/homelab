terraform plan -no-color -var-file=secrets.tfvars -var-file=terraform.tfvars
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

data.template_file.init[1]: Refreshing state...
data.template_file.init[0]: Refreshing state...
data.template_file.init[0]: Refreshing state...
data.template_file.init[0]: Refreshing state...
data.template_file.init[1]: Refreshing state...
data.template_file.init[1]: Refreshing state...

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

+ module.vpc.aws_eip.nat[0]
      id:                                          <computed>
      allocation_id:                               <computed>
      association_id:                              <computed>
      domain:                                      <computed>
      instance:                                    <computed>
      network_interface:                           <computed>
      private_ip:                                  <computed>
      public_ip:                                   <computed>
      vpc:                                         "true"

  + module.vpc.aws_eip.nat[1]
      id:                                          <computed>
      allocation_id:                               <computed>
      association_id:                              <computed>
      domain:                                      <computed>
      instance:                                    <computed>
      network_interface:                           <computed>
      private_ip:                                  <computed>
      public_ip:                                   <computed>
      vpc:                                         "true"

  + module.vpc.aws_elb.my-elb
      id:                                          <computed>
      arn:                                         <computed>
      availability_zones.#:                        <computed>
      connection_draining:                         "true"
      connection_draining_timeout:                 "400"
      cross_zone_load_balancing:                   "true"
      dns_name:                                    <computed>
      health_check.#:                              "1"
      health_check.0.healthy_threshold:            "2"
      health_check.0.interval:                     "30"
      health_check.0.target:                       "HTTP:80/"
      health_check.0.timeout:                      "3"
      health_check.0.unhealthy_threshold:          "2"
      idle_timeout:                                "60"
      instances.#:                                 <computed>
      internal:                                    <computed>
      listener.#:                                  "1"
      listener.3057123346.instance_port:           "80"
      listener.3057123346.instance_protocol:       "http"
      listener.3057123346.lb_port:                 "80"
      listener.3057123346.lb_protocol:             "http"
      listener.3057123346.ssl_certificate_id:      ""
      name:                                        "my-elb"
      security_groups.#:                           <computed>
      source_security_group:                       <computed>
      source_security_group_id:                    <computed>
      subnets.#:                                   <computed>
      tags.%:                                      "1"
      tags.Name:                                   "my-elb"
      zone_id:                                     <computed>

  + module.vpc.aws_internet_gateway.gw
      id:                                          <computed>
      tags.%:                                      "1"
      tags.Name:                                   "gw"
      vpc_id:                                      "${aws_vpc.main.id}"

  + module.vpc.aws_nat_gateway.nat-gw[0]
      id:                                          <computed>
      allocation_id:                               "${element(aws_eip.nat.*.id, count.index)}"
      network_interface_id:                        <computed>
      private_ip:                                  <computed>
      public_ip:                                   <computed>
      subnet_id:                                   "${element(aws_subnet.public.*.id, count.index)}"

  + module.vpc.aws_nat_gateway.nat-gw[1]
      id:                                          <computed>
      allocation_id:                               "${element(aws_eip.nat.*.id, count.index)}"
      network_interface_id:                        <computed>
      private_ip:                                  <computed>
      public_ip:                                   <computed>
      subnet_id:                                   "${element(aws_subnet.public.*.id, count.index)}"

  + module.vpc.aws_route53_zone.example
      id:                                          <computed>
      comment:                                     "Managed by Terraform"
      force_destroy:                               "false"
      name:                                        "example.com"
      name_servers.#:                              <computed>
      vpc_id:                                      "${aws_vpc.main.id}"
      vpc_region:                                  <computed>
      zone_id:                                     <computed>

  + module.vpc.aws_route_table.database[0]
      id:                                          <computed>
      propagating_vgws.#:                          <computed>
      route.#:                                     "1"
      route.~3258671810.cidr_block:                "0.0.0.0/0"
      route.~3258671810.egress_only_gateway_id:    ""
      route.~3258671810.gateway_id:                ""
      route.~3258671810.instance_id:               ""
      route.~3258671810.ipv6_cidr_block:           ""
      route.~3258671810.nat_gateway_id:            "${element(aws_nat_gateway.nat-gw.*.id, count.index)}"
      route.~3258671810.network_interface_id:      ""
      route.~3258671810.vpc_peering_connection_id: ""
      tags.%:                                      "1"
      tags.Name:                                   "database"
      vpc_id:                                      "${aws_vpc.main.id}"

  + module.vpc.aws_route_table.database[1]
      id:                                          <computed>
      propagating_vgws.#:                          <computed>
      route.#:                                     "1"
      route.~3258671810.cidr_block:                "0.0.0.0/0"
      route.~3258671810.egress_only_gateway_id:    ""
      route.~3258671810.gateway_id:                ""
      route.~3258671810.instance_id:               ""
      route.~3258671810.ipv6_cidr_block:           ""
      route.~3258671810.nat_gateway_id:            "${element(aws_nat_gateway.nat-gw.*.id, count.index)}"
      route.~3258671810.network_interface_id:      ""
      route.~3258671810.vpc_peering_connection_id: ""
      tags.%:                                      "1"
      tags.Name:                                   "database"
      vpc_id:                                      "${aws_vpc.main.id}"

  + module.vpc.aws_route_table.private[0]
      id:                                          <computed>
      propagating_vgws.#:                          <computed>
      route.#:                                     "1"
      route.~3258671810.cidr_block:                "0.0.0.0/0"
      route.~3258671810.egress_only_gateway_id:    ""
      route.~3258671810.gateway_id:                ""
      route.~3258671810.instance_id:               ""
      route.~3258671810.ipv6_cidr_block:           ""
      route.~3258671810.nat_gateway_id:            "${element(aws_nat_gateway.nat-gw.*.id, count.index)}"
      route.~3258671810.network_interface_id:      ""
      route.~3258671810.vpc_peering_connection_id: ""
      tags.%:                                      "1"
      tags.Name:                                   "private"
      vpc_id:                                      "${aws_vpc.main.id}"

  + module.vpc.aws_route_table.private[1]
      id:                                          <computed>
      propagating_vgws.#:                          <computed>
      route.#:                                     "1"
      route.~3258671810.cidr_block:                "0.0.0.0/0"
      route.~3258671810.egress_only_gateway_id:    ""
      route.~3258671810.gateway_id:                ""
      route.~3258671810.instance_id:               ""
      route.~3258671810.ipv6_cidr_block:           ""
      route.~3258671810.nat_gateway_id:            "${element(aws_nat_gateway.nat-gw.*.id, count.index)}"
      route.~3258671810.network_interface_id:      ""
      route.~3258671810.vpc_peering_connection_id: ""
      tags.%:                                      "1"
      tags.Name:                                   "private"
      vpc_id:                                      "${aws_vpc.main.id}"

  + module.vpc.aws_route_table.rt-public
      id:                                          <computed>
      propagating_vgws.#:                          <computed>
      route.#:                                     "1"
      route.~2599208424.cidr_block:                "0.0.0.0/0"
      route.~2599208424.egress_only_gateway_id:    ""
      route.~2599208424.gateway_id:                "${aws_internet_gateway.gw.id}"
      route.~2599208424.instance_id:               ""
      route.~2599208424.ipv6_cidr_block:           ""
      route.~2599208424.nat_gateway_id:            ""
      route.~2599208424.network_interface_id:      ""
      route.~2599208424.vpc_peering_connection_id: ""
      tags.%:                                      "1"
      tags.Name:                                   "public"
      vpc_id:                                      "${aws_vpc.main.id}"

  + module.vpc.aws_route_table_association.database-a[0]
      id:                                          <computed>
      route_table_id:                              "${element(aws_route_table.database.*.id, count.index)}"
      subnet_id:                                   "${element(aws_subnet.database.*.id, count.index)}"

  + module.vpc.aws_route_table_association.database-a[1]
      id:                                          <computed>
      route_table_id:                              "${element(aws_route_table.database.*.id, count.index)}"
      subnet_id:                                   "${element(aws_subnet.database.*.id, count.index)}"

  + module.vpc.aws_route_table_association.private-a[0]
      id:                                          <computed>
      route_table_id:                              "${element(aws_route_table.private.*.id, count.index)}"
      subnet_id:                                   "${element(aws_subnet.private.*.id, count.index)}"

  + module.vpc.aws_route_table_association.private-a[1]
      id:                                          <computed>
      route_table_id:                              "${element(aws_route_table.private.*.id, count.index)}"
      subnet_id:                                   "${element(aws_subnet.private.*.id, count.index)}"

  + module.vpc.aws_route_table_association.rta-public-a[0]
      id:                                          <computed>
      route_table_id:                              "${aws_route_table.rt-public.id}"
      subnet_id:                                   "${element(aws_subnet.public.*.id, count.index)}"

  + module.vpc.aws_route_table_association.rta-public-a[1]
      id:                                          <computed>
      route_table_id:                              "${aws_route_table.rt-public.id}"
      subnet_id:                                   "${element(aws_subnet.public.*.id, count.index)}"

  + module.vpc.aws_security_group.elb-securitygroup
      id:                                          <computed>
      arn:                                         <computed>
      description:                                 "ELB security group"
      egress.#:                                    <computed>
      ingress.#:                                   <computed>
      name:                                        "ELB"
      owner_id:                                    <computed>
      revoke_rules_on_delete:                      "false"
      vpc_id:                                      "${aws_vpc.main.id}"

  + module.vpc.aws_security_group.secgroup_app
      id:                                          <computed>
      arn:                                         <computed>
      description:                                 "App servers security group"
      egress.#:                                    <computed>
      ingress.#:                                   <computed>
      name:                                        "App Servers"
      owner_id:                                    <computed>
      revoke_rules_on_delete:                      "false"
      vpc_id:                                      "${aws_vpc.main.id}"

  + module.vpc.aws_security_group.secgroup_db
      id:                                          <computed>
      arn:                                         <computed>
      description:                                 "Database servers security group"
      egress.#:                                    <computed>
      ingress.#:                                   <computed>
      name:                                        "Database Servers"
      owner_id:                                    <computed>
      revoke_rules_on_delete:                      "false"
      vpc_id:                                      "${aws_vpc.main.id}"

  + module.vpc.aws_security_group.secgroup_web
      id:                                          <computed>
      arn:                                         <computed>
      description:                                 "Web servers security group"
      egress.#:                                    <computed>
      ingress.#:                                   <computed>
      name:                                        "Web Servers"
      owner_id:                                    <computed>
      revoke_rules_on_delete:                      "false"
      vpc_id:                                      "${aws_vpc.main.id}"

  + module.vpc.aws_security_group_rule.allow_all_to_elb
      id:                                          <computed>
      cidr_blocks.#:                               "1"
      cidr_blocks.0:                               "0.0.0.0/0"
      description:                                 "Allow all traffic to ELB port 80"
      from_port:                                   "80"
      protocol:                                    "tcp"
      security_group_id:                           "${aws_security_group.elb-securitygroup.id}"
      self:                                        "false"
      source_security_group_id:                    <computed>
      to_port:                                     "80"
      type:                                        "ingress"

  + module.vpc.aws_security_group_rule.allow_any_to_web_ssh
      id:                                          <computed>
      cidr_blocks.#:                               "1"
      cidr_blocks.0:                               "0.0.0.0/0"
      description:                                 "Allow ANY to WEB port 22"
      from_port:                                   "22"
      protocol:                                    "tcp"
      security_group_id:                           "${aws_security_group.secgroup_web.id}"
      self:                                        "false"
      source_security_group_id:                    <computed>
      to_port:                                     "22"
      type:                                        "ingress"

  + module.vpc.aws_security_group_rule.allow_app_to_any
      id:                                          <computed>
      cidr_blocks.#:                               "1"
      cidr_blocks.0:                               "0.0.0.0/0"
      description:                                 "Allow all traffic from APP to ANY"
      from_port:                                   "0"
      protocol:                                    "-1"
      security_group_id:                           "${aws_security_group.secgroup_app.id}"
      self:                                        "false"
      source_security_group_id:                    <computed>
      to_port:                                     "65535"
      type:                                        "egress"

  + module.vpc.aws_security_group_rule.allow_app_to_db
      id:                                          <computed>
      description:                                 "Allow APP to DB port 3306"
      from_port:                                   "3306"
      protocol:                                    "tcp"
      security_group_id:                           "${aws_security_group.secgroup_db.id}"
      self:                                        "false"
      source_security_group_id:                    "${aws_security_group.secgroup_app.id}"
      to_port:                                     "3306"
      type:                                        "ingress"

  + module.vpc.aws_security_group_rule.allow_db_to_any
      id:                                          <computed>
      cidr_blocks.#:                               "1"
      cidr_blocks.0:                               "0.0.0.0/0"
      description:                                 "Allow all traffic from DB to ANY"
      from_port:                                   "0"
      protocol:                                    "-1"
      security_group_id:                           "${aws_security_group.secgroup_db.id}"
      self:                                        "false"
      source_security_group_id:                    <computed>
      to_port:                                     "65535"
      type:                                        "egress"

  + module.vpc.aws_security_group_rule.allow_db_to_db
      id:                                          <computed>
      description:                                 "Allow DB to DB port 3306"
      from_port:                                   "3306"
      protocol:                                    "tcp"
      security_group_id:                           "${aws_security_group.secgroup_db.id}"
      self:                                        "false"
      source_security_group_id:                    "${aws_security_group.secgroup_db.id}"
      to_port:                                     "3306"
      type:                                        "ingress"

  + module.vpc.aws_security_group_rule.allow_elb_to_web
      id:                                          <computed>
      description:                                 "Allow ELB to WEB port 80"
      from_port:                                   "80"
      protocol:                                    "tcp"
      security_group_id:                           "${aws_security_group.elb-securitygroup.id}"
      self:                                        "false"
      source_security_group_id:                    "${aws_security_group.secgroup_web.id}"
      to_port:                                     "80"
      type:                                        "egress"

  + module.vpc.aws_security_group_rule.allow_web_from_elb
      id:                                          <computed>
      description:                                 "Allow WEB from ELB port 80"
      from_port:                                   "80"
      protocol:                                    "tcp"
      security_group_id:                           "${aws_security_group.secgroup_web.id}"
      self:                                        "false"
      source_security_group_id:                    "${aws_security_group.elb-securitygroup.id}"
      to_port:                                     "80"
      type:                                        "ingress"

  + module.vpc.aws_security_group_rule.allow_web_to_any
      id:                                          <computed>
      cidr_blocks.#:                               "1"
      cidr_blocks.0:                               "0.0.0.0/0"
      description:                                 "Allow all traffic from WEB to ANY"
      from_port:                                   "0"
      protocol:                                    "-1"
      security_group_id:                           "${aws_security_group.secgroup_web.id}"
      self:                                        "false"
      source_security_group_id:                    <computed>
      to_port:                                     "65535"
      type:                                        "egress"

  + module.vpc.aws_security_group_rule.allow_web_to_app
      id:                                          <computed>
      description:                                 "Allow WEB to APP port 8080"
      from_port:                                   "8080"
      protocol:                                    "tcp"
      security_group_id:                           "${aws_security_group.secgroup_app.id}"
      self:                                        "false"
      source_security_group_id:                    "${aws_security_group.secgroup_web.id}"
      to_port:                                     "8080"
      type:                                        "ingress"

  + module.vpc.aws_security_group_rule.allow_web_to_app_ssh
      id:                                          <computed>
      description:                                 "Allow WEB to APP port 22"
      from_port:                                   "22"
      protocol:                                    "tcp"
      security_group_id:                           "${aws_security_group.secgroup_app.id}"
      self:                                        "false"
      source_security_group_id:                    "${aws_security_group.secgroup_web.id}"
      to_port:                                     "22"
      type:                                        "ingress"

  + module.vpc.aws_security_group_rule.allow_web_to_db_ssh
      id:                                          <computed>
      description:                                 "Allow WEB to DB port 22"
      from_port:                                   "22"
      protocol:                                    "tcp"
      security_group_id:                           "${aws_security_group.secgroup_db.id}"
      self:                                        "false"
      source_security_group_id:                    "${aws_security_group.secgroup_web.id}"
      to_port:                                     "22"
      type:                                        "ingress"

  + module.vpc.aws_subnet.database[0]
      id:                                          <computed>
      assign_ipv6_address_on_creation:             "false"
      availability_zone:                           "us-east-1a"
      cidr_block:                                  "192.168.201.0/24"
      ipv6_cidr_block:                             <computed>
      ipv6_cidr_block_association_id:              <computed>
      map_public_ip_on_launch:                     "false"
      tags.%:                                      "1"
      tags.Name:                                   "database-0"
      vpc_id:                                      "${aws_vpc.main.id}"

  + module.vpc.aws_subnet.database[1]
      id:                                          <computed>
      assign_ipv6_address_on_creation:             "false"
      availability_zone:                           "us-east-1b"
      cidr_block:                                  "192.168.202.0/24"
      ipv6_cidr_block:                             <computed>
      ipv6_cidr_block_association_id:              <computed>
      map_public_ip_on_launch:                     "false"
      tags.%:                                      "1"
      tags.Name:                                   "database-1"
      vpc_id:                                      "${aws_vpc.main.id}"

  + module.vpc.aws_subnet.private[0]
      id:                                          <computed>
      assign_ipv6_address_on_creation:             "false"
      availability_zone:                           "us-east-1a"
      cidr_block:                                  "192.168.1.0/24"
      ipv6_cidr_block:                             <computed>
      ipv6_cidr_block_association_id:              <computed>
      map_public_ip_on_launch:                     "false"
      tags.%:                                      "1"
      tags.Name:                                   "private-0"
      vpc_id:                                      "${aws_vpc.main.id}"

  + module.vpc.aws_subnet.private[1]
      id:                                          <computed>
      assign_ipv6_address_on_creation:             "false"
      availability_zone:                           "us-east-1b"
      cidr_block:                                  "192.168.2.0/24"
      ipv6_cidr_block:                             <computed>
      ipv6_cidr_block_association_id:              <computed>
      map_public_ip_on_launch:                     "false"
      tags.%:                                      "1"
      tags.Name:                                   "private-1"
      vpc_id:                                      "${aws_vpc.main.id}"

  + module.vpc.aws_subnet.public[0]
      id:                                          <computed>
      assign_ipv6_address_on_creation:             "false"
      availability_zone:                           "us-east-1a"
      cidr_block:                                  "192.168.101.0/24"
      ipv6_cidr_block:                             <computed>
      ipv6_cidr_block_association_id:              <computed>
      map_public_ip_on_launch:                     "true"
      tags.%:                                      "1"
      tags.Name:                                   "public-0"
      vpc_id:                                      "${aws_vpc.main.id}"

  + module.vpc.aws_subnet.public[1]
      id:                                          <computed>
      assign_ipv6_address_on_creation:             "false"
      availability_zone:                           "us-east-1b"
      cidr_block:                                  "192.168.102.0/24"
      ipv6_cidr_block:                             <computed>
      ipv6_cidr_block_association_id:              <computed>
      map_public_ip_on_launch:                     "true"
      tags.%:                                      "1"
      tags.Name:                                   "public-1"
      vpc_id:                                      "${aws_vpc.main.id}"

  + module.vpc.aws_vpc.main
      id:                                          <computed>
      assign_generated_ipv6_cidr_block:            "false"
      cidr_block:                                  "192.168.0.0/16"
      default_network_acl_id:                      <computed>
      default_route_table_id:                      <computed>
      default_security_group_id:                   <computed>
      dhcp_options_id:                             <computed>
      enable_classiclink:                          "false"
      enable_classiclink_dns_support:              <computed>
      enable_dns_hostnames:                        "true"
      enable_dns_support:                          "true"
      instance_tenancy:                            "default"
      ipv6_association_id:                         <computed>
      ipv6_cidr_block:                             <computed>
      main_route_table_id:                         <computed>
      tags.%:                                      "1"
      tags.Name:                                   "main"

  + module.stack.module.app.aws_instance.host[0]
      id:                                          <computed>
      ami:                                         "ami-09eb8379a09d8c236"
      associate_public_ip_address:                 <computed>
      availability_zone:                           "us-east-1a"
      ebs_block_device.#:                          <computed>
      ephemeral_block_device.#:                    <computed>
      get_password_data:                           "false"
      instance_state:                              <computed>
      instance_type:                               "t2.micro"
      ipv6_address_count:                          <computed>
      ipv6_addresses.#:                            <computed>
      key_name:                                    "tom-aws-virginia"
      network_interface.#:                         <computed>
      network_interface_id:                        <computed>
      password_data:                               <computed>
      placement_group:                             <computed>
      primary_network_interface_id:                <computed>
      private_dns:                                 <computed>
      private_ip:                                  <computed>
      public_dns:                                  <computed>
      public_ip:                                   <computed>
      root_block_device.#:                         <computed>
      security_groups.#:                           <computed>
      source_dest_check:                           "true"
      subnet_id:                                   "${element(var.subnetid, count.index)}"
      tags.%:                                      "1"
      tags.Name:                                   "ami"
      tenancy:                                     <computed>
      user_data:                                   "b5fd2dbb4fc1ad49b90cc367f363d328ddae6aa7"
      volume_tags.%:                               <computed>
      vpc_security_group_ids.#:                    <computed>

  + module.stack.module.app.aws_instance.host[1]
      id:                                          <computed>
      ami:                                         "ami-09eb8379a09d8c236"
      associate_public_ip_address:                 <computed>
      availability_zone:                           "us-east-1b"
      ebs_block_device.#:                          <computed>
      ephemeral_block_device.#:                    <computed>
      get_password_data:                           "false"
      instance_state:                              <computed>
      instance_type:                               "t2.micro"
      ipv6_address_count:                          <computed>
      ipv6_addresses.#:                            <computed>
      key_name:                                    "tom-aws-virginia"
      network_interface.#:                         <computed>
      network_interface_id:                        <computed>
      password_data:                               <computed>
      placement_group:                             <computed>
      primary_network_interface_id:                <computed>
      private_dns:                                 <computed>
      private_ip:                                  <computed>
      public_dns:                                  <computed>
      public_ip:                                   <computed>
      root_block_device.#:                         <computed>
      security_groups.#:                           <computed>
      source_dest_check:                           "true"
      subnet_id:                                   "${element(var.subnetid, count.index)}"
      tags.%:                                      "1"
      tags.Name:                                   "ami"
      tenancy:                                     <computed>
      user_data:                                   "b5fd2dbb4fc1ad49b90cc367f363d328ddae6aa7"
      volume_tags.%:                               <computed>
      vpc_security_group_ids.#:                    <computed>

  + module.stack.module.app.aws_route53_record.server-record[0]
      id:                                          <computed>
      allow_overwrite:                             "true"
      fqdn:                                        <computed>
      name:                                        "app.az0.example.com"
      records.#:                                   <computed>
      ttl:                                         "60"
      type:                                        "A"
      zone_id:                                     "${var.zone_id}"

  + module.stack.module.app.aws_route53_record.server-record[1]
      id:                                          <computed>
      allow_overwrite:                             "true"
      fqdn:                                        <computed>
      name:                                        "app.az1.example.com"
      records.#:                                   <computed>
      ttl:                                         "60"
      type:                                        "A"
      zone_id:                                     "${var.zone_id}"

  + module.stack.module.db.aws_instance.host[0]
      id:                                          <computed>
      ami:                                         "ami-09eb8379a09d8c236"
      associate_public_ip_address:                 <computed>
      availability_zone:                           "us-east-1a"
      ebs_block_device.#:                          <computed>
      ephemeral_block_device.#:                    <computed>
      get_password_data:                           "false"
      instance_state:                              <computed>
      instance_type:                               "t2.micro"
      ipv6_address_count:                          <computed>
      ipv6_addresses.#:                            <computed>
      key_name:                                    "tom-aws-virginia"
      network_interface.#:                         <computed>
      network_interface_id:                        <computed>
      password_data:                               <computed>
      placement_group:                             <computed>
      primary_network_interface_id:                <computed>
      private_dns:                                 <computed>
      private_ip:                                  <computed>
      public_dns:                                  <computed>
      public_ip:                                   <computed>
      root_block_device.#:                         <computed>
      security_groups.#:                           <computed>
      source_dest_check:                           "true"
      subnet_id:                                   "${element(var.subnetid, count.index)}"
      tags.%:                                      "1"
      tags.Name:                                   "ami"
      tenancy:                                     <computed>
      user_data:                                   "7a4894571a6f9870033222a9d0964a2c981d3d7b"
      volume_tags.%:                               <computed>
      vpc_security_group_ids.#:                    <computed>

  + module.stack.module.db.aws_instance.host[1]
      id:                                          <computed>
      ami:                                         "ami-09eb8379a09d8c236"
      associate_public_ip_address:                 <computed>
      availability_zone:                           "us-east-1b"
      ebs_block_device.#:                          <computed>
      ephemeral_block_device.#:                    <computed>
      get_password_data:                           "false"
      instance_state:                              <computed>
      instance_type:                               "t2.micro"
      ipv6_address_count:                          <computed>
      ipv6_addresses.#:                            <computed>
      key_name:                                    "tom-aws-virginia"
      network_interface.#:                         <computed>
      network_interface_id:                        <computed>
      password_data:                               <computed>
      placement_group:                             <computed>
      primary_network_interface_id:                <computed>
      private_dns:                                 <computed>
      private_ip:                                  <computed>
      public_dns:                                  <computed>
      public_ip:                                   <computed>
      root_block_device.#:                         <computed>
      security_groups.#:                           <computed>
      source_dest_check:                           "true"
      subnet_id:                                   "${element(var.subnetid, count.index)}"
      tags.%:                                      "1"
      tags.Name:                                   "ami"
      tenancy:                                     <computed>
      user_data:                                   "1ff6ca9580cd142e1b10b503c334114b5d41e702"
      volume_tags.%:                               <computed>
      vpc_security_group_ids.#:                    <computed>

  + module.stack.module.db.aws_route53_record.server-record[0]
      id:                                          <computed>
      allow_overwrite:                             "true"
      fqdn:                                        <computed>
      name:                                        "db.az0.example.com"
      records.#:                                   <computed>
      ttl:                                         "60"
      type:                                        "A"
      zone_id:                                     "${var.zone_id}"

  + module.stack.module.db.aws_route53_record.server-record[1]
      id:                                          <computed>
      allow_overwrite:                             "true"
      fqdn:                                        <computed>
      name:                                        "db.az1.example.com"
      records.#:                                   <computed>
      ttl:                                         "60"
      type:                                        "A"
      zone_id:                                     "${var.zone_id}"

  + module.stack.module.web.aws_elb_attachment.my-elb-a[0]
      id:                                          <computed>
      elb:                                         "${var.aws_elb_id}"
      instance:                                    "${element(aws_instance.host.*.id, count.index)}"

  + module.stack.module.web.aws_elb_attachment.my-elb-a[1]
      id:                                          <computed>
      elb:                                         "${var.aws_elb_id}"
      instance:                                    "${element(aws_instance.host.*.id, count.index)}"

  + module.stack.module.web.aws_instance.host[0]
      id:                                          <computed>
      ami:                                         "ami-09eb8379a09d8c236"
      associate_public_ip_address:                 <computed>
      availability_zone:                           "us-east-1a"
      ebs_block_device.#:                          <computed>
      ephemeral_block_device.#:                    <computed>
      get_password_data:                           "false"
      instance_state:                              <computed>
      instance_type:                               "t2.micro"
      ipv6_address_count:                          <computed>
      ipv6_addresses.#:                            <computed>
      key_name:                                    "tom-aws-virginia"
      network_interface.#:                         <computed>
      network_interface_id:                        <computed>
      password_data:                               <computed>
      placement_group:                             <computed>
      primary_network_interface_id:                <computed>
      private_dns:                                 <computed>
      private_ip:                                  <computed>
      public_dns:                                  <computed>
      public_ip:                                   <computed>
      root_block_device.#:                         <computed>
      security_groups.#:                           <computed>
      source_dest_check:                           "true"
      subnet_id:                                   "${element(var.subnetid, count.index)}"
      tags.%:                                      "1"
      tags.Name:                                   "ami"
      tenancy:                                     <computed>
      user_data:                                   "5e09240914a5c475d5baa2ec280be3244d5a6c55"
      volume_tags.%:                               <computed>
      vpc_security_group_ids.#:                    <computed>

  + module.stack.module.web.aws_instance.host[1]
      id:                                          <computed>
      ami:                                         "ami-09eb8379a09d8c236"
      associate_public_ip_address:                 <computed>
      availability_zone:                           "us-east-1b"
      ebs_block_device.#:                          <computed>
      ephemeral_block_device.#:                    <computed>
      get_password_data:                           "false"
      instance_state:                              <computed>
      instance_type:                               "t2.micro"
      ipv6_address_count:                          <computed>
      ipv6_addresses.#:                            <computed>
      key_name:                                    "tom-aws-virginia"
      network_interface.#:                         <computed>
      network_interface_id:                        <computed>
      password_data:                               <computed>
      placement_group:                             <computed>
      primary_network_interface_id:                <computed>
      private_dns:                                 <computed>
      private_ip:                                  <computed>
      public_dns:                                  <computed>
      public_ip:                                   <computed>
      root_block_device.#:                         <computed>
      security_groups.#:                           <computed>
      source_dest_check:                           "true"
      subnet_id:                                   "${element(var.subnetid, count.index)}"
      tags.%:                                      "1"
      tags.Name:                                   "ami"
      tenancy:                                     <computed>
      user_data:                                   "eb845ef7ba0d66619a1f764787fd23faa817ba1a"
      volume_tags.%:                               <computed>
      vpc_security_group_ids.#:                    <computed>

  + module.stack.module.web.aws_route53_record.server-record[0]
      id:                                          <computed>
      allow_overwrite:                             "true"
      fqdn:                                        <computed>
      name:                                        "web.az0.example.com"
      records.#:                                   <computed>
      ttl:                                         "60"
      type:                                        "A"
      zone_id:                                     "${var.zone_id}"

  + module.stack.module.web.aws_route53_record.server-record[1]
      id:                                          <computed>
      allow_overwrite:                             "true"
      fqdn:                                        <computed>
      name:                                        "web.az1.example.com"
      records.#:                                   <computed>
      ttl:                                         "60"
      type:                                        "A"
      zone_id:                                     "${var.zone_id}"
Plan: 55 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.


